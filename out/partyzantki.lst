mads 2.0.6 build 58 (28 Jan 17)
Source: partyzantki.asm
     1 				; *********************************************
     2 				; Party-Zantki - 256b Atari mini-demo
     3 				; Kane / Suspect
     4 				; Luton, 10/7/2022
     5 				; Copyright (C) 2022 Pawel Matusz. Distributed under the terms of the GNU GPL-3.0.
     6 				; 
     7 				; Silly Venture 2022 Atari 256-bytes compo entry
     8 				; *********************************************
     9
    10 = 4000			start 	= $4000
    11 = 5000			scr		= $5000
    12 = E100			charset	= $e000+32*8
    13 = 0020			width	= 32		; narrow playfield
    14 = 0020			heigth	= 32
    15 				//heigth	= 56
    16 = 0014			sync	= 20
    17
    18 = 0090			seccnt	= $90
    19 = 0091			letter	= $91
    20 = 0092			t1		= $92
    21 = 0098			stab    = $98
    22
    23
    24 					icl "Includes/registers.asm"
Source: registers.asm
     1 				; *******************************************
     2 				; Register definitions
     3 				; Kane / Suspect
     4 				; Copyright (C) 2021-2022 Pawel Matusz. Distributed under the terms of the GNU GPL-3.0.
     5 				; *******************************************
     6
     7
     8 				.ifndef REGISTERS_ASM
     9 				REGISTERS_ASM = "y"
    10
    11 				SDMCTL	=	$022F	; Direct Memory Access Control
    12 				DMACTL	=	$D400
    13
    14 				CHART	=	$02F3	; Character Control
    15 				CHACTL	=	$D401
    16
    17 				SDLSTL	=	$0230	; Display List Pointer 
    18 				DLISTL	=	$D402
    19 				SDLSTH	=	$0231
    20 				DLISTH	=	$D403
    21
    22 				HSCROL	=	$D404	; Horizontal Fine Scroll
    23 				VSCROL	=	$D405	; Vertical Fine Scroll
    24 				PMBASE	=	$D407	; Player/Missile Base Address
    25 				CHBAS	=	$02F4	; Character Set Base Address
    26 				CHBASE	=	$D409
    27 				WSYNC	=	$D40A	; Wait for Horizontal Sync
    28 				VCOUNT	=	$D40B	; Vertical Line Counter
    29 				NMIEN	=	$D40E	; Non-Maskable Interrupt (NMI) Enable
    30 				NMIRES	=	$D40F	; Non-Maskable Interrupt (NMI) Reset
    31 				NMIST	=	$D40F	; Non-Maskable Interrupt (NMI) Status
    32
    33 				COLOR0	=	$02C4	; Color/luminance of Playfield 0
    34 				COLPF0	=	$D016
    35 				COLOR1	=	$02C5
    36 				COLPF1	=	$D017
    37 				COLOR2	=	$02C6
    38 				COLPF2	=	$D018
    39 				COLOR3	=	$02C7
    40 				COLPF3	=	$D019
    41 				COLOR4	=	$02C8	; Color/luminance of Playfield background
    42 				COLBK	=	$D01A
    43 				GPRIOR	=	$026F
    44 				PRIOR	=	$D01B
    45 				GRACTL	=	$D01D	; Graphics Control
    46
    47 				RANDOM	=	$D20A
    48
    49 				RTCLOKH	=	$12
    50 				RTCLOKM	=	$13
    51 				RTCLOKL	=	$14
    52
    53 				.endif
    25 					icl "Includes/zeropage.asm"
Source: zeropage.asm
     1 				; *******************************************
     2 				; Zero page definitions
     3 				; Copyright (C) 2021 Pawel Matusz. Distributed under the terms of the GNU GPL-3.0.
     4 				; Kane / Suspect
     5 				; *******************************************
     6
     7 				.ifndef ZEROPAGE_ASM
     8 				ZEROPAGE_ASM = "y"
     9
    10 				t1		= $90
    11 				t2		= $91
    12 				t3		= $92
    13 				t4		= $93
    14 				t5		= $94
    15 				t6		= $95
    16 				t7		= $96
    17 				t8		= $97
    18 				t9		= $98
    19 				t10		= $99
    20 				t11		= $9a
    21 				t12		= $9b
    22 				t13		= $9c
    23 				t14		= $9d
    24 				t15		= $9e
    25 				t16		= $9f
    26 				t17		= $a0
    27 				t18		= $a1
    28 				t19		= $a2
    29 				t20		= $a3
    30 				t21		= $a4
    31 				t22		= $a5
    32 				t23		= $a6
    33 				t24		= $a7
    34 				t25		= $a8
    35 				t26		= $a9
    36 				t27		= $aa
    37 				t28		= $ab
    38 				t29		= $ac
    39 				t30		= $ad
    40 				t31		= $ae
    41 				t32		= $af
    42 				t33		= $b0
    43 				t34		= $b1
    44 				t35		= $b2
    45 				t36		= $b3
    46 				; note: $CB-$DD are used by the rmt player
    47 				timerL	= $de	; cyclical frame count
    48 				timerH	= $df
    49 				tLocal	= $e0
    50 				p1		= $e1	; pointers
    51 				p2		= $e2
    52
    53 				.endif
    26
    27 					org	start
    28
    29 					// create display list
    30 					
    31 FFFF> 4000-40F2> A2 6F		ldx	#heigth+>scr-1
    32 4002			dlcreate
    33 4002 A0 03			ldy #3
    34 4004			dlc1
    35 4004 20 CE 40			jsr	dl_elem_add
    36 4007 88				dey
    37 4008 10 FA			bpl dlc1
    38 400A CA				dex
    39 400B E0 50			cpx #>scr
    40 400D 10 F3			bpl	dlcreate
    41 					
    42 400F CE 2F 02			dec	SDMCTL		; $21 = narrow playfield
    43 4012 A9 F2			lda	#<dl
    44 4014 8D 30 02			sta	SDLSTL
    45 4017 A9 40			lda #$40
    46 4019 8D 31 02			sta	SDLSTH
    47 401C 8D 6F 02			sta GPRIOR
    48
    49 401F A2 20			ldx	#32
    50 4021 A0 1D			ldy	#29		;27, 29, 30
    51 4023 84 90			sty seccnt
    52 4025			ct1
    53 4025 94 98			sty stab,x
    54 4027 69 E0			adc	#224	;192, 224, 240
    55 4029 90 01			bcc	ct2
    56 402B 88				dey
    57 402C			ct2
    58 402C CA				dex
    59 402D D0 F6			bne	ct1
    60
    61 					// main loop
    62 402F			mainloop
    63
    64 402F A2 04			ldx	#4
    65 4031			syncloop
    66 4031 C6 90			dec	seccnt
    67 4033 A5 90			lda	seccnt
    68 4035 29 0F			and	#$f
    69 4037			vsync
    70 4037 CD 0B D4			cmp	VCOUNT
    71 403A D0 FB			bne	vsync
    72 403C CA				dex
    73 403D D0 F2			bne	syncloop
    74
    75 403F A5 90			lda	seccnt
    76 4041 10 47			bpl	zoomer
    77 4043 A9 1E			lda	#30
    78 4045 85 90			sta seccnt
    79
    80 4047 A6 91			ldx	letter
    81 4049 BD E3 40			lda text,x		;color, column
    82 404C E8				inx
    83 404D BC E3 40			ldy	text,x		; char
    84 4050 E8				inx
    85 4051 E0 0E			cpx	#textend-text
    86 4053 D0 02			bne	nowrap
    87 4055 A2 00			ldx	#0
    88 4057			nowrap	
    89 4057 86 91			stx	letter
    90 					
    91 4059 8C 71 40			sty	printline+1
    92 405C A8				tay
    93 405D 29 0F			and	#$0f
    94 405F 0A				asl
    95 4060 8D 7C 40			sta scrptr1
    96 4063 98				tya
    97 4064 29 F0			and #$f0
    98 4066 8D C8 02			sta COLOR4
    99 4069 A9 5C			lda	#>scr+heigth/2-4
   100 406B 8D 7D 40			sta	scrptr1+1
   101
   102 406E			printchar
   103 406E A0 07			ldy #7
   104 4070			printline			; print one font pixel line
   105 4070 B9 00 E1			lda	charset,y
   106 4073 A2 07			ldx	#7
   107 4075			printdot			; print single font "pixel"
   108 4075 4A				lsr
   109 4076 90 07			bcc	nodot
   110 4078 48				pha
   111 4079 A9 FF			lda	#$ff
   112 = 407C			scrptr1 = *+1
   113 407B 9D 00 50			sta scr,x
   114 407E 68				pla
   115 407F			nodot
   116 407F CA				dex
   117 4080 10 F3			bpl printdot
   118 4082 EE 7D 40			inc scrptr1+1
   119 4085 88				dey
   120 4086 10 E8			bpl printline
   121 4088 30 A5			bmi	mainloop
   122
   123 408A				.proc zoomer
   124 408A A9 50			lda #>scr
   125 408C 8D C0 40			sta ptarget1+2
   126 408F A9 1F			lda	#heigth-1
   127 4091 85 92			sta t1
   128 4093			pcollumn
   129 4093 A6 92			ldx t1
   130 4095 B5 98			lda stab,x
   131 4097 69 50			adc #>scr
   132 4099 AA				tax
   133 409A 8E AF 40			stx	psource1+2
   134 409D 8E B3 40			stx	psource2+2
   135 40A0 E8				inx
   136 40A1 8E B7 40			stx	psource3+2
   137 40A4 CA				dex
   138 40A5 CA				dex
   139 40A6 8E BB 40			stx	psource4+2
   140 40A9 A2 1F			ldx	#width-1
   141 40AB			pline					; print one pixel line
   142 40AB B4 98			ldy stab,x
   143 40AD			psource1
   144 40AD B9 00 50			lda	scr,y
   145 40B0 C8				iny
   146 40B1			psource2
   147 40B1 79 00 50			adc	scr,y
   148 40B4 88				dey
   149 40B5			psource3
   150 40B5 79 00 50			adc	scr,y
   151 40B8 C8				iny
   152 40B9			psource4
   153 40B9 79 00 50			adc	scr,y
   154 40BC 4A				lsr
   155 40BD 4A				lsr
   156 40BE			ptarget1
   157 40BE 9D 00 50			sta scr,x
   158 40C1 CA				dex
   159 40C2 10 E7			bpl pline
   160
   161 40C4 EE C0 40			inc ptarget1+2			; move screen to next line
   162
   163 40C7 C6 92			dec t1
   164 40C9 D0 C8			bne pcollumn
   165 					.endp
   166 					
   167 40CB 4C 2F 40			jmp mainloop
   168
   169 				// add Display List element - one mode 15 line and one blank line
   170 40CE			dl_elem_add
   171 40CE A9 4F			lda	#$4f
   172 40D0 20 D4 40			jsr	s1
   173 40D3 8A				txa
   174
   175 40D4 8D F3 40		s1	sta dl1			; for this to work, "dl" must start on an even address
   176 40D7 EE D5 40			inc s1+1
   177 40DA D0 03			bne s2
   178 40DC EE D6 40			inc s1+2
   179 40DF			s2	
   180 40DF EE D5 40			inc s1+1
   181 40E2 60				rts
   182
   183 40E3			text
   184 40E3 16 98 36 A8			.byte $16, ["S"-32]*8, $36, ["U"-32]*8
   185 40E7 55 98 A7 80 94 28		.byte $55, ["S"-32]*8, $A7, ["P"-32]*8, $94, ["E"-32]*8
   186 40ED 26 18 B7 A0			.byte $26, ["C"-32]*8, $B7, ["T"-32]*8
   187 40F1			textend
   188 40F1 00				.byte 0
   189 					
   190 				;	.align 2
   191 40F2 70			dl	.byte 	$70		; has to be aligned to even address
   192 40F3			dl1
   193 					;.byte	$4F, a(scr), 0, $4F, a(scr), 0, $41, a(dl)
   194 					;.byte	$4F, 0, a(scr), 0, ... $41, a(dl)
   195 					
   196 					//org	dl1+[2*4*heigth]
   197 40F3				org	dl1+[4*4*heigth]
   198 					
   199 42F3-42F5> 41 F2 40	dl2	.byte	$41, a(dl)
   200 				;	.byte $4B, $41, $4E, $45
   201 					
